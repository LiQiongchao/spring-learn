<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!--
        bean definitions here
        id: 在同一容器中要唯一
        name: 是别名，可以有多个，使用逗号或者空格隔开
        factory-method: 工厂方法，调用 bean 中的静态方法，返回的存活的对象将会视为通过调用构造函数创建的对象。例如管理单例模式的bean
     -->
    <bean id="simpleBean" name="simpleBean2, simpleBean3"
          class="com.tamecode.spring.core.bean.SimpleBean"
          factory-method="createInstance"
    />

    <!-- 类和内部的静态嵌套类之间使用 “$” 来连接。经测试使用 “.” 也是可以的。 -->
<!--    <bean id="staticSimpleBean" class="com.tamecode.spring.core.bean.SimpleBean$StaticSimpleBean"/>-->
    <bean id="staticSimpleBean" class="com.tamecode.spring.core.bean.SimpleBean.StaticSimpleBean"/>

    <!--  给 simpleBean 起别名  -->
    <alias name="simpleBean" alias="simpleBean2"/>

    <!--
        通过一个类的非静态方法返回的对象来创建 bean
        通过 {@link DefaultServiceLocator#createClientServiceInstance} 返回的对象来创建一个bean
        一个工厂类可以包含多个工厂方法，在 DefaultServiceLocator 可以包含多个创建 bean 的方法
    -->
    <!-- the factory bean, which contains a method called createInstance() -->
    <bean id="serviceLocator" class="com.tamecode.spring.core.bean.DefaultServiceLocator">
        <!-- inject any dependencies required by this locator bean -->
    </bean>

    <!-- the bean to be created via the factory bean -->
    <bean id="clientService"
          factory-bean="serviceLocator"
          factory-method="createClientServiceInstance"/>

    <bean id="accountService"
          factory-bean="serviceLocator"
          factory-method="createAccountServiceInstance"/>

    <!--
        构造器注入：
            默认是按入参的顺序传参，也可以指定参数的类型，参数的位置，参数名等方式。
    -->
    <bean id="exampleBean" class="com.tamecode.spring.core.bean.ExampleBean">
        <constructor-arg value="7500000"/>
        <constructor-arg value="42"/>
<!--        <constructor-arg type="int" value="7500000"/>-->
<!--        <constructor-arg type="java.lang.String" value="42"/>-->

<!--        <constructor-arg index="0" value="7500000"/>-->
<!--        <constructor-arg index="1" value="42"/>-->

<!--        <constructor-arg name="years" value="7500000"/>-->
<!--        <constructor-arg name="ultimateAnswer" value="42"/>-->
    </bean>

    <!-- 使用 setter 方法注入 -->
    <bean id="simpleMovieLister" class="com.tamecode.spring.core.bean.SimpleMovieLister">
        <property name="movieFinder" ref="simpleBean"/>
    </bean>

    <!--
        调用工厂方法来创建bean，并传递工厂方法的参数
     -->
    <bean id="staticArgsBean" class="com.tamecode.spring.core.bean.StaticArgsBean" factory-method="createInstance">
        <constructor-arg value="jimmy"/>
        <constructor-arg value="18"/>
        <constructor-arg value="男"/>
    </bean>


    <!--
        设置属性值的方式
            1- 使用 <property> 标签
            2- 使用 P 名称空间
            3- 使用 java.util.Properties 实例配置
    -->
    <bean id="myDataSource1" class="com.tamecode.spring.core.bean.BasicDataSource" destroy-method="close">
        <!-- results in a setDriverClassName(String) call -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
        <property name="username" value="root"/>
        <property name="password" value="misterkaoli"/>
    </bean>

    <bean id="myDataSource2" class="com.tamecode.spring.core.bean.BasicDataSource"
          destroy-method="close"
          p:driverClassName="com.mysql.jdbc.Driver"
          p:url="jdbc:mysql://localhost:3306/mydb"
          p:username="root"
          p:password="misterkaoli"/>

    <!-- 使用 PropertyEditor 解析成一个 java.util.Properties 的bean，再赋值给 properties 的属性 -->
    <bean id="mappings"
          class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <!-- typed as a java.util.Properties -->
        <property name="properties">
            <value>
                jdbc.driver.className=com.mysql.jdbc.Driver
                jdbc.url=jdbc:mysql://localhost:3306/mydb
            </value>
        </property>
    </bean>

    <!--
        idref: 是指引用一个bean的名，作为字符串使用，与直接使用字符串的区别在于 idref 会去验证这个 bean 的 id 是否存在。
     -->
    <bean id="simpleMovieLister" class="com.tamecode.spring.core.bean.SimpleMovieLister">
        <property name="stringField">
            <idref bean="simpleBean"/>
            <!-- <value>simpleBean</value>-->
        </property>
    </bean>


    <!-- inner beans
        bean的嵌套使用
     -->
    <bean id="outBean" class="com.tamecode.spring.core.bean.SimpleMovieLister">
        <!--
            使用内置bean定义来替换 property ref 操作
            内置 bean 不需要定义 id 和 name 属性，定义了也会被容器忽略，无意义
            scope 标识也会被忽略
            内部 bean 不能被注入
        -->
        <property name="movieFinder">
            <bean id="innerBean" class="com.tamecode.spring.core.bean.SimpleBean">
                <!--<property name=""-->
            </bean>
        </property>
    </bean>

</beans>